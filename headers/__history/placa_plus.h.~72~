#define LED1 pin_a5
#define LED2 pin_a4


// PORTA
#define   IRQ         PIN_A2
#define   CE          PIN_A1
#define   MCLR        PIN_A3
// PORTC
#define   SCK         PIN_C0
#define   SDI         PIN_C1
#define   SDO         PIN_C2
#define   CS          PIN_C3
                      
//TRISA
#define   CE_TRIS     TRISA,1 //O
#define   IRQ_TRIS    TRISA,2 //I

//TRISC
#define   SCK_TRIS    TRISC,0 //O
#define   SDI_TRIS    TRISC,1 //I
#define   SDO_TRIS    TRISC,2 //O
#define   CS_TRIS     TRISC,3 //O

//*****************
//*   VARIABLES   *
//*****************
#BYTE TRISA     =  0x0C //00000110
//#BYTE TRISB     =  0x86
#BYTE TRISC     =  0x02 //00000010
#BYTE INTCON    =  0x00


//********************************
//*   EEPROM                     *
//********************************
//DEFINE EEPROM_NOME PRIMEIRO ENDERECO,TAMANHO BYTES

//conta transmissões perdidas - bytes 0 a 3
#ROM 0xF000 = {0xFF,0xFF,0xFF,0xF0}
#DEFINE EP_NAO_TRANS 0x00,0x04

//conta quantas horas ligado desde o ultimo reset - bytes 4 a 5
#ROM 0xF004 = {0x00,0x00}
#DEFINE EP_HORA_LIGADO 0x04,0x02

//conta transmissões perdidas - bytes 6 a 9
#ROM 0xF006 = {0x00,0x00,0x00,0x00}
#DEFINE EP_TESTE 0x06,0x04

//SELETOR DE FREQUENCIA - byte 0A
#ROM 0xF006 = {0x00}
#DEFINE EP_TESTE 0x0A,0x01


//********************************

volatile unsigned int8 counter = 0,
                       sec = 0,
                       min = 0;
              
volatile unsigned int1 um_segundo = 0b0, 
                       um_minuto = 0b0,
                       uma_hora = 0b0,
                       flag_envio = 0b0,
                       flag_interr = 0b0;
              
#INT_TIMER1
void timer1_isr(){  // interrupt routine    
   set_timer1(3000);
   counter--;  // decrements counter which is set to it_per_sec 
   
   //SEGUNDOS
   if(counter==0){         
      sec++;                
      counter=int_per_sec; //resets counter
      //contador_seg++;
      um_segundo = 0b01;
   } 

   //MINUTOS
   if(sec==60){ 
      sec=0;       
      min++;
      um_minuto = 0b1;
   }
    
   //HORAS
   if(min==60) { 
      min=0;
      //atualizar dados da eeprom aqui
   }
}

#int_ext
void external_can_interrupt ()
{
   flag_interr = 0b1;
}

void INT_EN(){
   //Habilitar interrupciones externas con flanco de
   //bajada.
   disable_interrupts(global);
   enable_interrupts(int_ext);
   ext_int_edge( H_TO_L );
   //bit_set(IRQ_TRIS);
   enable_interrupts(global);
}
//*****************************************************

void piscaLed(char nPisca,int16 delay){
     char i = 0;
     
     for(i = 0; i < nPisca; i++){
         output_high(LED1);
         delay_ms(20);
         output_low(LED1);
         delay_ms(delay);
     }
}

void eeprom_grava(unsigned int8 address, unsigned int8 tamanho, unsigned int32 hexa)
{
   unsigned int8 i = 0, bytes[4];               
   
   //separa bytes
   for (i = 0; i < tamanho; i++)
   {
     bytes[i] = hexa;
     hexa >>= 8;
   }
     
   //imprime na ordem inversa
   while(tamanho) 
   {
      write_eeprom(address++,bytes[--tamanho]);
      delay_ms(1);
   }
}

unsigned int32 eeprom_le(unsigned int8 address, unsigned int8 tamanho)
{
   unsigned int8 i = 0;
   unsigned int32 bytes = 0;
   
   for(i = tamanho; i > 0; i--)
   {
      bytes <<= 8;
      bytes |= read_eeprom(address++); delay_ms(1);
   }
   return bytes;
}
