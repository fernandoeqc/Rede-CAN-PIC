#include <teste_can_rec.h>
#include <can-mcp2515.c>
#include <placa_plus.h>


#define MASTER 200
#define RECEPTOR1 303

void main()
{  
   struct rx_stat rxstat;
   int32 rx_id;
   int32 tx_id;
   int8 rx_len;               
   int8 dadosEnv[8] = {0xAA,0xBB},
        dadosRec[8] = {0xAA,0xBB};

   //VEJA placa_plus.h
   set_tris_a(0b00001100);
   set_tris_c(0b00000010);
   output_low(LED1);
   output_low(LED2);
   
   output_high(LED1);
   delay_ms(200);
   output_low(LED1);
   delay_ms(200);
   output_high(LED1);
   delay_ms(200);
   output_low(LED1);
   delay_ms(200);

   can_init();
   
   can_set_mode(CAN_OP_CONFIG);
   can_set_id(RX0MASK,0x71F,CAN_USE_EXTENDED_ID);
   can_set_id(RX0FILTER0,0x71F,CAN_USE_EXTENDED_ID);
   can_set_id(RX0FILTER1,0x71F,CAN_USE_EXTENDED_ID);
   can_set_id(RX1MASK,0x71F,CAN_USE_EXTENDED_ID);
   can_set_id(RX1FILTER2,0x71F,CAN_USE_EXTENDED_ID);
   can_set_id(RX1FILTER3,0x71F,CAN_USE_EXTENDED_ID);
   can_set_id(RX1FILTER4,0x71F,CAN_USE_EXTENDED_ID);
   can_set_id(RX1FILTER5,0x71F,CAN_USE_EXTENDED_ID);
   //can_set_interr(0xA0);
   can_set_mode(CAN_OP_NORMAL);
   
//===========REGISTRADORES===================================
   disable_interrupts(GLOBAL);                 // habilitar interr global
   enable_interrupts(INT_EXT_H2L);             // interrupção CAN
   setup_timer_1(T1_INTERNAL | T1_DIV_BY_1);   // setar timer1 para interno
   enable_interrupts(INT_TIMER1);              // habilita Timer1 
   set_timer1(0);                              // limpar flag TMR1H & TMR1L 
   counter=int_per_sec;
   enable_interrupts(GLOBAL);                  // habilitar interr global
//----------------------------------------------------------


   while(TRUE)
   {
      if(um_segundo)
      {      
         um_segundo = 0b0;
         
         if(can_kbhit())
         {
            if (can_getd (rx_id, dadosRec, rx_len, rxstat))
            {
               if(dadosRec[0] == 0xAA)
               {
                  output_high(LED2);
                  output_low(SAIDA1);
               }
               else if(dadosRec[0] == 0xBB)
               {
                  output_low(LED2);
                  output_high(SAIDA1);
               }
            piscaLed(1,1,LED1);
            }
         }
      }
   }
}


